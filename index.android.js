/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 * @flow
 */

import React, { Component } from 'react';
import {PushNotification, tok} from './notifications'
import {
    AppRegistry,
    StyleSheet,
    Text,
    View,
    TouchableOpacity,
    Linking,
    Alert
} from 'react-native';

export default class reactNativeNotifications extends Component {
    constructor(props) {
        super(props);
    }
    //register device to receive push notifications
    register = () => {
        let topicName = 'Hello';
        let url = 'https://iid.googleapis.com/iid/v1/' + tok + '/rel/topics/' + topicName;
        fetch(url, { headers: { 'Content-Type': 'application/json', 'Authorization': 'key=AAAAfhpeLQY:APA91bHZyVmn-Cp48-pT9wFtlJw_uNPWawLrsEMmNtNeprWStt4DNj9TJue836ygg3nJBtjsOmNcgA1f3J_YehsyAwceCN1OOfw4du4fqM9HCQfxto2B4t6B-qnqTsl5NMUKzQh5XCIf' }, method: 'POST' })
            .then((result) => {
                if (result.status == 200) {
                    console.log(result);
                } else {
                    console.log(result.status)
                }
            })
            .catch((error) => {
                console.log(error);
            })
    }
    //unregister device from receiving push notifications
    unregister = () => {
        let topicName = '/topics/Hello';
        var data = {
            to: topicName,
            registration_tokens: [tok]
        };
        var payload = JSON.stringify(data)
        let url = 'https://iid.googleapis.com/iid/v1:batchRemove';
        fetch(url, { headers: { 'Content-Type': 'application/json', 'Authorization': 'key=AAAAfhpeLQY:APA91bHZyVmn-Cp48-pT9wFtlJw_uNPWawLrsEMmNtNeprWStt4DNj9TJue836ygg3nJBtjsOmNcgA1f3J_YehsyAwceCN1OOfw4du4fqM9HCQfxto2B4t6B-qnqTsl5NMUKzQh5XCIf' }, method: 'POST', body: payload })
            .then((result) => {
                if (result.status == 200) {
                    console.log(result);
                } else {
                    console.log(result)
                }
            })
            .catch((error) => {
                console.log(error);
            })
    }
    //Local Notifications
    notify = () => {
        PushNotification.localNotification({
            /* Android Only Properties */
            id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID 
            ticker: "My Notification Ticker", // (optional) 
            autoCancel: true, // (optional) default: true 
            largeIcon: "ic_launcher", // (optional) default: "ic_launcher" 
            smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher" 
            bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop 
            subText: "This is a subText", // (optional) default: none 
            color: "red", // (optional) default: system default 
            vibrate: true, // (optional) default: true 
            vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000 
            tag: 'some_tag', // (optional) add tag to message 
            group: "group", // (optional) add group to message 
            ongoing: false, // (optional) set whether this is an "ongoing" notification 

            /* iOS and Android properties */
            title: "My Notification Title", // (optional, for iOS this is only used in apple watch, the title will be the app name on other iOS devices) 
            message: "My Notification Message", // (required) 
            playSound: true, // (optional) default: true 
            soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played) 
            number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero) 
            actions: '["Yes", "No"]', // (Android only) See the doc for notification actions to know more 
        });
    }
    render() {
        return (
            <View style={styles.container}>
        <Text style={styles.welcome}>
          Welcome to React Native!
        </Text>
        <Text style={styles.instructions}>
          React Native Push Notifications
        </Text>
        <TouchableOpacity style={styles.button} onPress={this.notify.bind(this)}>
          <Text>Click</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.button} onPress={this.register.bind(this)}>
          <Text>Register</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.button} onPress={this.unregister.bind(this)}>
          <Text>Unregister</Text>
        </TouchableOpacity>
      </View>
        );
    }
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#F5FCFF',
    },
    button: {
        margin: 10
    },
    welcome: {
        fontSize: 20,
        textAlign: 'center',
        margin: 10,
    },
    instructions: {
        textAlign: 'center',
        color: '#333333',
        marginBottom: 5,
    },
});

AppRegistry.registerComponent('reactNativeNotifications', () => reactNativeNotifications);
